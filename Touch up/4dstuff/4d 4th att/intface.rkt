#lang racket

(require 2htdp/universe)
(require (planet wmfarr/plt-linalg:1:13/matrix))
(require "projword.rkt")
(require "globalstruct.rkt")
(require "vec-mat.rkt")
(require "rot3dpoly.rkt")
(require "3dpolyop.rkt")
(require "worldop.rkt")
(provide (all-defined-out))

(define (change wor)
  (mov-cam-con wor 2))

(define rel #f)
(define ref 0);0->

(define (keys wor str)
  (cond
    ((string=? str "o") (begin (set! rel #f) wor))
    ((string=? str "p") (begin (set! rel #t) wor))
    ((string->number str) (begin (set! ref (string->number str)) wor))
   (else (if rel
  (cond
    ((string=? str "q") (if (= 0 ref) (mov-cam-rel-ed wor (ll->mat '((0 0 1))) 1) (mov-ob-rel-ed wor 2 1 (sub1 ref))))
    ((string=? str "e") (if (= 0 ref) (mov-cam-rel-ed wor (ll->mat '((0 0 1))) -1) (mov-ob-rel-ed wor 2 -1 (sub1 ref))))
    ((string=? str "w") (if (= 0 ref) (mov-cam-rel-ed wor (ll->mat '((0 1 0))) 1) (mov-ob-rel-ed wor 1 1 (sub1 ref))))
    ((string=? str "s") (if (= 0 ref) (mov-cam-rel-ed wor (ll->mat '((0 1 0))) -1) (mov-ob-rel-ed wor 1 -1 (sub1 ref))))
    ((string=? str "a") (if (= 0 ref) (mov-cam-rel-ed wor (ll->mat '((1 0 0))) 1) (mov-ob-rel-ed wor 0 1 (sub1 ref))))
    ((string=? str "d") (if (= 0 ref) (mov-cam-rel-ed wor (ll->mat '((1 0 0))) -1) (mov-ob-rel-ed wor 0 -1 (sub1 ref))))
    ((string=? str "z") (if (= 0 ref) (rot-cam-rel wor 0 1 '(/ pi 64)) (rot-ob-rel wor 0 1 (/ pi 64) (sub1 ref))))
    ((string=? str "x") (if (= 0 ref) (rot-cam-rel wor 0 2 '(/ pi 64)) (rot-ob-rel wor 0 2 (/ pi 64) (sub1 ref))))
    ((string=? str "c") (if (= 0 ref) (rot-cam-rel wor 1 2 '(/ pi 64)) (rot-ob-rel wor 0 3 (/ pi 64) (sub1 ref))))
    ((string=? str "z") (if (= 0 ref) (rot-cam-rel wor 0 1 '(/ pi 64)) (rot-ob-rel wor 1 2 (/ pi 64) (sub1 ref))))
    ((string=? str "x") (if (= 0 ref) (rot-cam-rel wor 0 2 '(/ pi 64)) (rot-ob-rel wor 1 3 (/ pi 64) (sub1 ref))))
    ((string=? str "c") (if (= 0 ref) (rot-cam-rel wor 1 2 '(/ pi 64)) (rot-ob-rel wor 2 3 (/ pi 64) (sub1 ref))))
    (else (error '1 "hi")))
  (cond
    ((string=? str "q") (if (= 0 ref) (mov-cam-abs-ed wor (ll->mat '((0 0 1))) 1) (mov-ob-abs-ed wor (ll->mat '((0 0 1))) 1 (sub1 ref))))
    ((string=? str "e") (if (= 0 ref) (mov-cam-abs-ed wor (ll->mat '((0 0 1))) -1) (mov-ob-abs-ed wor (ll->mat '((0 0 1))) -1 (sub1 ref))))
    ((string=? str "w") (if (= 0 ref) (mov-cam-abs-ed wor (ll->mat '((0 1 0))) 1) (mov-ob-abs-ed wor (ll->mat '((0 1 0))) 1 (sub1 ref))))
    ((string=? str "s") (if (= 0 ref) (mov-cam-abs-ed wor (ll->mat '((0 1 0))) -1) (mov-ob-abs-ed wor (ll->mat '((0 1 0))) -1 (sub1 ref))))
    ((string=? str "a") (if (= 0 ref) (mov-cam-abs-ed wor (ll->mat '((1 0 0))) 1) (mov-ob-abs-ed wor (ll->mat '((1 0 0))) 1 (sub1 ref))))
    ((string=? str "d") (if (= 0 ref) (mov-cam-abs-ed wor (ll->mat '((1 0 0))) -1) (mov-ob-abs-ed wor (ll->mat '((1 0 0))) -1 (sub1 ref))))
    ((string=? str "z") (if (= 0 ref) (rot-cam-abs wor 0 1 '(/ pi 64)) (rot-ob-abs wor 0 1 (/ pi 64) (sub1 ref))))
    ((string=? str "x") (if (= 0 ref) (rot-cam-abs wor 0 2 '(/ pi 64)) (rot-ob-abs wor 0 2 (/ pi 64) (sub1 ref))))
    ((string=? str "c") (if (= 0 ref) (rot-cam-abs wor 1 2 '(/ pi 64)) (rot-ob-abs wor 0 3 (/ pi 64) (sub1 ref))))
    ((string=? str "v") (if (= 0 ref) (rot-cam-abs wor 0 1 '(/ pi 64)) (rot-ob-abs wor 1 2 (/ pi 64) (sub1 ref))))
    ((string=? str "b") (if (= 0 ref) (rot-cam-abs wor 0 2 '(/ pi 64)) (rot-ob-abs wor 1 3 (/ pi 64) (sub1 ref))))
    ((string=? str "n") (if (= 0 ref) (rot-cam-abs wor 1 2 '(/ pi 64)) (rot-ob-abs wor 2 3 (/ pi 64) (sub1 ref))))
    (else (error '1 "hi")))
  ))))


#|
(big-bang (world (cam-obj (matrix 3 1 0 0 0) (matrix-identity 3) (l->mat '(0 0 0)) #f)
                    (list
                     (obj (3dpoly (matrix 3 1 0 0 5) (matrix-identity 3) (vector (l->mat '(-20 -20 20)) (l->mat '(100 -20 20)) (l->mat '(-20 100 20))) 
                     (list (reftri 0 1 2 (triarray 1 (vector (vector #"\0\0\0\0")))))) (l->mat '(0 0 0))  #f)
                     ))
     (on-draw place-scene)
     (on-tick change)
     (on-key keys))
|#
#|(define worl (world (cam-obj (matrix 3 1 0 0 0) (matrix-identity 3) (l->mat '(0 0 0)) #f)
                    (list
                     (obj (3dpoly (matrix 3 1 0 0 65) (matrix-identity 3) 
                        (vector (l->mat '(-10 -10 55)) (l->mat '(10 -10 55)) (l->mat '(-10 10 55)) (l->mat '(10 10 55))
                                (l->mat '(-10 -10 75)) (l->mat '(10 -10 75)) (l->mat '(-10 10 75)) (l->mat '(10 10 75)))
                     (list (reftri 0 1 2 (triarray 1 (vector (vector #"\0\0\0\0")))) (reftri 1 2 3 (triarray 1 (vector (vector #"\0\0\0\0"))))
                           (reftri 4 5 6 (triarray 1 (vector (vector #"\0\0\177\0")))) (reftri 5 6 7 (triarray 1 (vector (vector #"\0\0\177\0"))))
                           (reftri 0 1 4 (triarray 1 (vector (vector #"\0\177\0\0")))) (reftri 1 4 5 (triarray 1 (vector (vector #"\0\177\0\0"))))
                           (reftri 2 3 6 (triarray 1 (vector (vector #"\0\0\0\177")))) (reftri 3 6 7 (triarray 1 (vector (vector #"\0\0\0\177"))))
                           (reftri 0 2 4 (triarray 1 (vector (vector #"\0\177\177\0")))) (reftri 2 4 6 (triarray 1 (vector (vector #"\0\177\177\0"))))
                           (reftri 1 3 5 (triarray 1 (vector (vector #"\0\177\0\177")))) (reftri 3 5 7 (triarray 1 (vector (vector #"\0\177\0\177"))))
                           )) (l->mat '(0 0 0))  #f)
                     )))|#
(define (big)
  (set! worl (change (change worl)))
  (place-scene worl))
(define (bang str)
  (set! worl (keys worl str))
  (place-scene worl))


;(set! rel #f)
;;(set! ref 1)
;(big)(bang "x")(bang "x")(bang "x")(bang "x")(bang "a")(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)(big)
;(set! ref 0)
;(set! rel #f)
;(big)(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")
;(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")
;(set! rel #t)
;(big)(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")
;(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")

;(set! rel #f)
;(set! ref 1)
;(big)(bang "z")(bang "z")(bang "z")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")

;(set! rel #t)
;(set! ref 1)
;(big)(bang "z")(bang "z")(bang "z")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "x")(bang "x")(bang "x")(bang "z")(bang "z")(bang "z")
;;;(big)(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "x")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")
;;;(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")(bang "c")

(define worl (world (cam-obj (matrix 4 1 0 0 0 0) (matrix-identity 4) (l->mat '(0 0 0 0)) #f)
                    (lis6
                     (obj (3dpoly (matrix 4 1 0 0 65 58) (matrix-identity 4) 
                        (vector (l->mat '(-10 -10 55 58)) (l->mat '(10 -10 55 58)) (l->mat '(-10 10 55 58)) (l->mat '(10 10 55 58))
                                (l->mat '(-10 -10 75 58)) (l->mat '(10 -10 75 58)) (l->mat '(-10 10 75 58)) (l->mat '(10 10 75 58))
                                (l->mat '(-10 -10 55 78)) (l->mat '(10 -10 55 78)) (l->mat '(-10 10 55 78)) (l->mat '(10 10 55 78))
                                (l->mat '(-10 -10 75 78)) (l->mat '(10 -10 75 78)) (l->mat '(-10 10 75 78)) (l->mat '(10 10 75 78)))
                     (list (reftri 0 1 2 (triarray 1 (vector (vector #"\0\0\0\0")))) (reftri 1 2 3 (triarray 1 (vector (vector #"\0\0\0\0"))))
                           (reftri 4 5 6 (triarray 1 (vector (vector #"\0\0\177\0")))) (reftri 5 6 7 (triarray 1 (vector (vector #"\0\0\177\0"))))
                           (reftri 0 1 4 (triarray 1 (vector (vector #"\0\177\0\0")))) (reftri 1 4 5 (triarray 1 (vector (vector #"\0\177\0\0"))))
                           (reftri 2 3 6 (triarray 1 (vector (vector #"\0\0\0\177")))) (reftri 3 6 7 (triarray 1 (vector (vector #"\0\0\0\177"))))
                           (reftri 0 2 4 (triarray 1 (vector (vector #"\0\177\177\0")))) (reftri 2 4 6 (triarray 1 (vector (vector #"\0\177\177\0"))))
                           (reftri 1 3 5 (triarray 1 (vector (vector #"\0\177\0\177")))) (reftri 3 5 7 (triarray 1 (vector (vector #"\0\177\0\177"))))
                           )) (l->mat '(0 0 0 0))  #f)
                     )))
#|(define worl (world (cam-obj (matrix 3 1 0 0 0) (matrix-identity 3) (l->mat '(0 0 0 )) #f)
                    (list
                     (obj (3dpoly (matrix 3 1 0 0 65 ) (matrix-identity 3) 
                        (vector (l->mat '(-10 -10 55 )) (l->mat '(10 -10 55 )) (l->mat '(-10 10 55 )) (l->mat '(10 10 55 ))
                                (l->mat '(-10 -10 75 )) (l->mat '(10 -10 75 )) (l->mat '(-10 10 75 )) (l->mat '(10 10 75 )))
                     (list (reftri 0 1 2 (triarray 1 (vector (vector #"\0\0\0\0")))) (reftri 1 2 3 (triarray 1 (vector (vector #"\0\0\0\0"))))
                           (reftri 4 5 6 (triarray 1 (vector (vector #"\0\0\177\0")))) (reftri 5 6 7 (triarray 1 (vector (vector #"\0\0\177\0"))))
                           (reftri 0 1 4 (triarray 1 (vector (vector #"\0\177\0\0")))) (reftri 1 4 5 (triarray 1 (vector (vector #"\0\177\0\0"))))
                           (reftri 2 3 6 (triarray 1 (vector (vector #"\0\0\0\177")))) (reftri 3 6 7 (triarray 1 (vector (vector #"\0\0\0\177"))))
                           (reftri 0 2 4 (triarray 1 (vector (vector #"\0\177\177\0")))) (reftri 2 4 6 (triarray 1 (vector (vector #"\0\177\177\0"))))
                           (reftri 1 3 5 (triarray 1 (vector (vector #"\0\177\0\177")))) (reftri 3 5 7 (triarray 1 (vector (vector #"\0\177\0\177"))))
                           )) (l->mat '(0 0 0 ))  #f)
                     )))|#

(bang "1")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")
(bang "c")


(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")
(bang "v")

(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")
(bang "b")